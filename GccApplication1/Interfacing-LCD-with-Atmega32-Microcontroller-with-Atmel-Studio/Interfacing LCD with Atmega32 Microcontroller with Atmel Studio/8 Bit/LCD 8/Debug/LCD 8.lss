
LCD 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000842  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000842  000008b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00001028  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b76  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000239  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004db  00000000  00000000  00001e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022c  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040b  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 03 	call	0x7ba	; 0x7ba <main>
  8a:	0c 94 1f 04 	jmp	0x83e	; 0x83e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
  92:	61 15       	cp	r22, r1
  94:	71 05       	cpc	r23, r1
  96:	09 f0       	breq	.+2      	; 0x9a <pinChange+0x8>
  98:	a0 c0       	rjmp	.+320    	; 0x1da <pinChange+0x148>
	{
		if(a == eS_PORTA0)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	11 f4       	brne	.+4      	; 0xa2 <pinChange+0x10>
		  PORTA &= ~(1<<PA0);
  9e:	d8 98       	cbi	0x1b, 0	; 27
  a0:	08 95       	ret
		else if(a == eS_PORTA1)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
  a6:	11 f4       	brne	.+4      	; 0xac <pinChange+0x1a>
		  PORTA &= ~(1<<PA1); 
  a8:	d9 98       	cbi	0x1b, 1	; 27
  aa:	08 95       	ret
		else if(a == eS_PORTA2)
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	11 f4       	brne	.+4      	; 0xb6 <pinChange+0x24>
		  PORTA &= ~(1<<PA2);
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	08 95       	ret
		else if(a == eS_PORTA3)
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <pinChange+0x2e>
		  PORTA &= ~(1<<PA3); 
  bc:	db 98       	cbi	0x1b, 3	; 27
  be:	08 95       	ret
		else if(a == eS_PORTA4)
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	91 05       	cpc	r25, r1
  c4:	11 f4       	brne	.+4      	; 0xca <pinChange+0x38>
		  PORTA &= ~(1<<PA4); 
  c6:	dc 98       	cbi	0x1b, 4	; 27
  c8:	08 95       	ret
		else if(a == eS_PORTA5)
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	91 05       	cpc	r25, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <pinChange+0x42>
		  PORTA &= ~(1<<PA5); 
  d0:	dd 98       	cbi	0x1b, 5	; 27
  d2:	08 95       	ret
		else if(a == eS_PORTA6)
  d4:	86 30       	cpi	r24, 0x06	; 6
  d6:	91 05       	cpc	r25, r1
  d8:	11 f4       	brne	.+4      	; 0xde <pinChange+0x4c>
		  PORTA &= ~(1<<PA6);  
  da:	de 98       	cbi	0x1b, 6	; 27
  dc:	08 95       	ret
		else if(a == eS_PORTA7)
  de:	87 30       	cpi	r24, 0x07	; 7
  e0:	91 05       	cpc	r25, r1
  e2:	11 f4       	brne	.+4      	; 0xe8 <pinChange+0x56>
		  PORTA &= ~(1<<PA7);
  e4:	df 98       	cbi	0x1b, 7	; 27
  e6:	08 95       	ret
		else if(a == eS_PORTB0)
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	91 05       	cpc	r25, r1
  ec:	11 f4       	brne	.+4      	; 0xf2 <pinChange+0x60>
		  PORTB &= ~(1<<PB0);  
  ee:	c0 98       	cbi	0x18, 0	; 24
  f0:	08 95       	ret
		else if(a == eS_PORTB1)
  f2:	8b 30       	cpi	r24, 0x0B	; 11
  f4:	91 05       	cpc	r25, r1
  f6:	11 f4       	brne	.+4      	; 0xfc <pinChange+0x6a>
		  PORTB &= ~(1<<PB1);
  f8:	c1 98       	cbi	0x18, 1	; 24
  fa:	08 95       	ret
		else if(a == eS_PORTB2)
  fc:	8c 30       	cpi	r24, 0x0C	; 12
  fe:	91 05       	cpc	r25, r1
 100:	11 f4       	brne	.+4      	; 0x106 <pinChange+0x74>
		  PORTB &= ~(1<<PB2);  
 102:	c2 98       	cbi	0x18, 2	; 24
 104:	08 95       	ret
		else if(a == eS_PORTB3)
 106:	8d 30       	cpi	r24, 0x0D	; 13
 108:	91 05       	cpc	r25, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <pinChange+0x7e>
		  PORTB &= ~(1<<PB3);  
 10c:	c3 98       	cbi	0x18, 3	; 24
 10e:	08 95       	ret
		else if(a == eS_PORTB4)
 110:	8e 30       	cpi	r24, 0x0E	; 14
 112:	91 05       	cpc	r25, r1
 114:	11 f4       	brne	.+4      	; 0x11a <pinChange+0x88>
		  PORTB &= ~(1<<PB4);  
 116:	c4 98       	cbi	0x18, 4	; 24
 118:	08 95       	ret
		else if(a == eS_PORTB5)
 11a:	8f 30       	cpi	r24, 0x0F	; 15
 11c:	91 05       	cpc	r25, r1
 11e:	11 f4       	brne	.+4      	; 0x124 <pinChange+0x92>
		  PORTB &= ~(1<<PB5);  
 120:	c5 98       	cbi	0x18, 5	; 24
 122:	08 95       	ret
		else if(a == eS_PORTB6)
 124:	80 31       	cpi	r24, 0x10	; 16
 126:	91 05       	cpc	r25, r1
 128:	11 f4       	brne	.+4      	; 0x12e <pinChange+0x9c>
		  PORTB &= ~(1<<PB6);  
 12a:	c6 98       	cbi	0x18, 6	; 24
 12c:	08 95       	ret
		else if(a == eS_PORTB7)
 12e:	81 31       	cpi	r24, 0x11	; 17
 130:	91 05       	cpc	r25, r1
 132:	11 f4       	brne	.+4      	; 0x138 <pinChange+0xa6>
		  PORTB &= ~(1<<PB7);
 134:	c7 98       	cbi	0x18, 7	; 24
 136:	08 95       	ret
		else if(a == eS_PORTC0)
 138:	84 31       	cpi	r24, 0x14	; 20
 13a:	91 05       	cpc	r25, r1
 13c:	11 f4       	brne	.+4      	; 0x142 <pinChange+0xb0>
		  PORTC &= ~(1<<PC0);   
 13e:	a8 98       	cbi	0x15, 0	; 21
 140:	08 95       	ret
		else if(a == eS_PORTC1)
 142:	85 31       	cpi	r24, 0x15	; 21
 144:	91 05       	cpc	r25, r1
 146:	11 f4       	brne	.+4      	; 0x14c <pinChange+0xba>
		  PORTC &= ~(1<<PC1); 
 148:	a9 98       	cbi	0x15, 1	; 21
 14a:	08 95       	ret
		else if(a == eS_PORTC2)
 14c:	86 31       	cpi	r24, 0x16	; 22
 14e:	91 05       	cpc	r25, r1
 150:	11 f4       	brne	.+4      	; 0x156 <pinChange+0xc4>
		  PORTC &= ~(1<<PC2);
 152:	aa 98       	cbi	0x15, 2	; 21
 154:	08 95       	ret
		else if(a == eS_PORTC3)
 156:	87 31       	cpi	r24, 0x17	; 23
 158:	91 05       	cpc	r25, r1
 15a:	11 f4       	brne	.+4      	; 0x160 <pinChange+0xce>
		  PORTC &= ~(1<<PC3);   
 15c:	ab 98       	cbi	0x15, 3	; 21
 15e:	08 95       	ret
		else if(a == eS_PORTC4)
 160:	88 31       	cpi	r24, 0x18	; 24
 162:	91 05       	cpc	r25, r1
 164:	11 f4       	brne	.+4      	; 0x16a <pinChange+0xd8>
		  PORTC &= ~(1<<PC4);  
 166:	ac 98       	cbi	0x15, 4	; 21
 168:	08 95       	ret
		else if(a == eS_PORTC5)
 16a:	89 31       	cpi	r24, 0x19	; 25
 16c:	91 05       	cpc	r25, r1
 16e:	11 f4       	brne	.+4      	; 0x174 <pinChange+0xe2>
		  PORTC &= ~(1<<PC5);  
 170:	ad 98       	cbi	0x15, 5	; 21
 172:	08 95       	ret
        else if(a == eS_PORTC6)
 174:	8a 31       	cpi	r24, 0x1A	; 26
 176:	91 05       	cpc	r25, r1
 178:	11 f4       	brne	.+4      	; 0x17e <pinChange+0xec>
          PORTC &= ~(1<<PC6);		
 17a:	ae 98       	cbi	0x15, 6	; 21
 17c:	08 95       	ret
		else if(a == eS_PORTC7)
 17e:	8b 31       	cpi	r24, 0x1B	; 27
 180:	91 05       	cpc	r25, r1
 182:	11 f4       	brne	.+4      	; 0x188 <pinChange+0xf6>
		  PORTC &= ~(1<<PC7);
 184:	af 98       	cbi	0x15, 7	; 21
 186:	08 95       	ret
		else if(a == eS_PORTD0)
 188:	8e 31       	cpi	r24, 0x1E	; 30
 18a:	91 05       	cpc	r25, r1
 18c:	11 f4       	brne	.+4      	; 0x192 <pinChange+0x100>
		  PORTD &= ~(1<<PD0);
 18e:	90 98       	cbi	0x12, 0	; 18
 190:	08 95       	ret
		else if(a == eS_PORTD1)
 192:	8f 31       	cpi	r24, 0x1F	; 31
 194:	91 05       	cpc	r25, r1
 196:	11 f4       	brne	.+4      	; 0x19c <pinChange+0x10a>
		  PORTD &= ~(1<<PD1);  
 198:	91 98       	cbi	0x12, 1	; 18
 19a:	08 95       	ret
		else if(a == eS_PORTD2)
 19c:	80 32       	cpi	r24, 0x20	; 32
 19e:	91 05       	cpc	r25, r1
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <pinChange+0x114>
		  PORTD &= ~(1<<PD2);
 1a2:	92 98       	cbi	0x12, 2	; 18
 1a4:	08 95       	ret
		else if(a == eS_PORTD3)
 1a6:	81 32       	cpi	r24, 0x21	; 33
 1a8:	91 05       	cpc	r25, r1
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <pinChange+0x11e>
		  PORTD &= ~(1<<PD3);
 1ac:	93 98       	cbi	0x12, 3	; 18
 1ae:	08 95       	ret
		else if(a == eS_PORTD4)
 1b0:	82 32       	cpi	r24, 0x22	; 34
 1b2:	91 05       	cpc	r25, r1
 1b4:	11 f4       	brne	.+4      	; 0x1ba <pinChange+0x128>
		  PORTD &= ~(1<<PD4);
 1b6:	94 98       	cbi	0x12, 4	; 18
 1b8:	08 95       	ret
		else if(a == eS_PORTD5)
 1ba:	83 32       	cpi	r24, 0x23	; 35
 1bc:	91 05       	cpc	r25, r1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <pinChange+0x132>
		  PORTD &= ~(1<<PD5);
 1c0:	95 98       	cbi	0x12, 5	; 18
 1c2:	08 95       	ret
		else if(a == eS_PORTD6)
 1c4:	84 32       	cpi	r24, 0x24	; 36
 1c6:	91 05       	cpc	r25, r1
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x13c>
		  PORTD &= ~(1<<PD6);   
 1ca:	96 98       	cbi	0x12, 6	; 18
 1cc:	08 95       	ret
		else if(a == eS_PORTD7)
 1ce:	85 32       	cpi	r24, 0x25	; 37
 1d0:	91 05       	cpc	r25, r1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinChange+0x144>
 1d4:	a0 c0       	rjmp	.+320    	; 0x316 <pinChange+0x284>
		  PORTD &= ~(1<<PD7);           
 1d6:	97 98       	cbi	0x12, 7	; 18
 1d8:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x150>
		  PORTA |= (1<<PA0);
 1de:	d8 9a       	sbi	0x1b, 0	; 27
 1e0:	08 95       	ret
		else if(a == eS_PORTA1)
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x15a>
		  PORTA |= (1<<PA1);
 1e8:	d9 9a       	sbi	0x1b, 1	; 27
 1ea:	08 95       	ret
		else if(a == eS_PORTA2)
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x164>
		  PORTA |= (1<<PA2);
 1f2:	da 9a       	sbi	0x1b, 2	; 27
 1f4:	08 95       	ret
		else if(a == eS_PORTA3)
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x16e>
		  PORTA |= (1<<PA3);
 1fc:	db 9a       	sbi	0x1b, 3	; 27
 1fe:	08 95       	ret
		else if(a == eS_PORTA4)
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x178>
		  PORTA |= (1<<PA4);
 206:	dc 9a       	sbi	0x1b, 4	; 27
 208:	08 95       	ret
		else if(a == eS_PORTA5)
 20a:	85 30       	cpi	r24, 0x05	; 5
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x182>
		  PORTA |= (1<<PA5);
 210:	dd 9a       	sbi	0x1b, 5	; 27
 212:	08 95       	ret
		else if(a == eS_PORTA6)
 214:	86 30       	cpi	r24, 0x06	; 6
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x18c>
		  PORTA |= (1<<PA6);
 21a:	de 9a       	sbi	0x1b, 6	; 27
 21c:	08 95       	ret
		else if(a == eS_PORTA7)
 21e:	87 30       	cpi	r24, 0x07	; 7
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x196>
		  PORTA |= (1<<PA7);
 224:	df 9a       	sbi	0x1b, 7	; 27
 226:	08 95       	ret
		else if(a == eS_PORTB0)
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1a0>
	  	  PORTB |= (1<<PB0);
 22e:	c0 9a       	sbi	0x18, 0	; 24
 230:	08 95       	ret
		else if(a == eS_PORTB1)
 232:	8b 30       	cpi	r24, 0x0B	; 11
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1aa>
		  PORTB |= (1<<PB1);
 238:	c1 9a       	sbi	0x18, 1	; 24
 23a:	08 95       	ret
		else if(a == eS_PORTB2)
 23c:	8c 30       	cpi	r24, 0x0C	; 12
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1b4>
		  PORTB |= (1<<PB2);
 242:	c2 9a       	sbi	0x18, 2	; 24
 244:	08 95       	ret
		else if(a == eS_PORTB3)
 246:	8d 30       	cpi	r24, 0x0D	; 13
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1be>
		  PORTB |= (1<<PB3);
 24c:	c3 9a       	sbi	0x18, 3	; 24
 24e:	08 95       	ret
		else if(a == eS_PORTB4)
 250:	8e 30       	cpi	r24, 0x0E	; 14
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1c8>
		  PORTB |= (1<<PB4);
 256:	c4 9a       	sbi	0x18, 4	; 24
 258:	08 95       	ret
		else if(a == eS_PORTB5)
 25a:	8f 30       	cpi	r24, 0x0F	; 15
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1d2>
		  PORTB |= (1<<PB5);
 260:	c5 9a       	sbi	0x18, 5	; 24
 262:	08 95       	ret
		else if(a == eS_PORTB6)
 264:	80 31       	cpi	r24, 0x10	; 16
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1dc>
		  PORTB |= (1<<PB6);
 26a:	c6 9a       	sbi	0x18, 6	; 24
 26c:	08 95       	ret
		else if(a == eS_PORTB7)
 26e:	81 31       	cpi	r24, 0x11	; 17
 270:	91 05       	cpc	r25, r1
 272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1e6>
		  PORTB |= (1<<PB7);
 274:	c7 9a       	sbi	0x18, 7	; 24
 276:	08 95       	ret
		else if(a == eS_PORTC0)
 278:	84 31       	cpi	r24, 0x14	; 20
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x1f0>
		  PORTC |= (1<<PC0);
 27e:	a8 9a       	sbi	0x15, 0	; 21
 280:	08 95       	ret
		else if(a == eS_PORTC1)
 282:	85 31       	cpi	r24, 0x15	; 21
 284:	91 05       	cpc	r25, r1
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x1fa>
		  PORTC |= (1<<PC1);
 288:	a9 9a       	sbi	0x15, 1	; 21
 28a:	08 95       	ret
		else if(a == eS_PORTC2)
 28c:	86 31       	cpi	r24, 0x16	; 22
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x204>
	  	  PORTC |= (1<<PC2);
 292:	aa 9a       	sbi	0x15, 2	; 21
 294:	08 95       	ret
		else if(a == eS_PORTC3)
 296:	87 31       	cpi	r24, 0x17	; 23
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x20e>
		  PORTC |= (1<<PC3);
 29c:	ab 9a       	sbi	0x15, 3	; 21
 29e:	08 95       	ret
		else if(a == eS_PORTC4)
 2a0:	88 31       	cpi	r24, 0x18	; 24
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x218>
		  PORTC |= (1<<PC4);
 2a6:	ac 9a       	sbi	0x15, 4	; 21
 2a8:	08 95       	ret
		else if(a == eS_PORTC5)
 2aa:	89 31       	cpi	r24, 0x19	; 25
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x222>
		  PORTC |= (1<<PC5);
 2b0:	ad 9a       	sbi	0x15, 5	; 21
 2b2:	08 95       	ret
		else if(a == eS_PORTC6)
 2b4:	8a 31       	cpi	r24, 0x1A	; 26
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x22c>
		  PORTC |= (1<<PC6);  
 2ba:	ae 9a       	sbi	0x15, 6	; 21
 2bc:	08 95       	ret
		else if(a == eS_PORTC7)
 2be:	8b 31       	cpi	r24, 0x1B	; 27
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x236>
		  PORTC |= (1<<PC7);
 2c4:	af 9a       	sbi	0x15, 7	; 21
 2c6:	08 95       	ret
		else if(a == eS_PORTD0)
 2c8:	8e 31       	cpi	r24, 0x1E	; 30
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x240>
		  PORTD |= (1<<PD0);
 2ce:	90 9a       	sbi	0x12, 0	; 18
 2d0:	08 95       	ret
		else if(a == eS_PORTD1)
 2d2:	8f 31       	cpi	r24, 0x1F	; 31
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x24a>
		  PORTD |= (1<<PD1);
 2d8:	91 9a       	sbi	0x12, 1	; 18
 2da:	08 95       	ret
		else if(a == eS_PORTD2)
 2dc:	80 32       	cpi	r24, 0x20	; 32
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x254>
		  PORTD |= (1<<PD2);
 2e2:	92 9a       	sbi	0x12, 2	; 18
 2e4:	08 95       	ret
		else if(a == eS_PORTD3)
 2e6:	81 32       	cpi	r24, 0x21	; 33
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x25e>
		  PORTD |= (1<<PD3);
 2ec:	93 9a       	sbi	0x12, 3	; 18
 2ee:	08 95       	ret
		else if(a == eS_PORTD4)
 2f0:	82 32       	cpi	r24, 0x22	; 34
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x268>
		  PORTD |= (1<<PD4);
 2f6:	94 9a       	sbi	0x12, 4	; 18
 2f8:	08 95       	ret
		else if(a == eS_PORTD5)
 2fa:	83 32       	cpi	r24, 0x23	; 35
 2fc:	91 05       	cpc	r25, r1
 2fe:	11 f4       	brne	.+4      	; 0x304 <pinChange+0x272>
		  PORTD |= (1<<PD5);
 300:	95 9a       	sbi	0x12, 5	; 18
 302:	08 95       	ret
		else if(a == eS_PORTD6)
 304:	84 32       	cpi	r24, 0x24	; 36
 306:	91 05       	cpc	r25, r1
 308:	11 f4       	brne	.+4      	; 0x30e <pinChange+0x27c>
		  PORTD |= (1<<PD6);
 30a:	96 9a       	sbi	0x12, 6	; 18
 30c:	08 95       	ret
		else if(a == eS_PORTD7)
 30e:	85 32       	cpi	r24, 0x25	; 37
 310:	91 05       	cpc	r25, r1
 312:	09 f4       	brne	.+2      	; 0x316 <pinChange+0x284>
		  PORTD |= (1<<PD7);
 314:	97 9a       	sbi	0x12, 7	; 18
 316:	08 95       	ret

00000318 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	d8 2f       	mov	r29, r24
	if(a & 1)
 31e:	c8 2f       	mov	r28, r24
 320:	80 ff       	sbrs	r24, 0
 322:	07 c0       	rjmp	.+14     	; 0x332 <Lcd8_Port+0x1a>
	pinChange(D0,1);
 324:	8e e1       	ldi	r24, 0x1E	; 30
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 330:	06 c0       	rjmp	.+12     	; 0x33e <Lcd8_Port+0x26>
	else
	pinChange(D0,0);
 332:	8e e1       	ldi	r24, 0x1E	; 30
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 33e:	c1 ff       	sbrs	r28, 1
 340:	07 c0       	rjmp	.+14     	; 0x350 <Lcd8_Port+0x38>
	pinChange(D1,1);
 342:	8f e1       	ldi	r24, 0x1F	; 31
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 34e:	06 c0       	rjmp	.+12     	; 0x35c <Lcd8_Port+0x44>
	else
	pinChange(D1,0);
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 35c:	c2 ff       	sbrs	r28, 2
 35e:	07 c0       	rjmp	.+14     	; 0x36e <Lcd8_Port+0x56>
	pinChange(D2,1);
 360:	80 e2       	ldi	r24, 0x20	; 32
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 36c:	06 c0       	rjmp	.+12     	; 0x37a <Lcd8_Port+0x62>
	else
	pinChange(D2,0);
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 37a:	c3 ff       	sbrs	r28, 3
 37c:	07 c0       	rjmp	.+14     	; 0x38c <Lcd8_Port+0x74>
	pinChange(D3,1);
 37e:	81 e2       	ldi	r24, 0x21	; 33
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 38a:	06 c0       	rjmp	.+12     	; 0x398 <Lcd8_Port+0x80>
	else
	pinChange(D3,0);
 38c:	81 e2       	ldi	r24, 0x21	; 33
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 16)
 398:	c4 ff       	sbrs	r28, 4
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <Lcd8_Port+0x92>
	pinChange(D4,1);
 39c:	82 e2       	ldi	r24, 0x22	; 34
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <Lcd8_Port+0x9e>
	else
	pinChange(D4,0);
 3aa:	82 e2       	ldi	r24, 0x22	; 34
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>

	if(a & 32)
 3b6:	c5 ff       	sbrs	r28, 5
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <Lcd8_Port+0xb0>
	pinChange(D5,1);
 3ba:	83 e2       	ldi	r24, 0x23	; 35
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <Lcd8_Port+0xbc>
	else
	pinChange(D5,0);
 3c8:	83 e2       	ldi	r24, 0x23	; 35
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 64)
 3d4:	c6 ff       	sbrs	r28, 6
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <Lcd8_Port+0xce>
	pinChange(D6,1);
 3d8:	84 e2       	ldi	r24, 0x24	; 36
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <Lcd8_Port+0xda>
	else
	pinChange(D6,0);
 3e6:	84 e2       	ldi	r24, 0x24	; 36
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 128)
 3f2:	dd 23       	and	r29, r29
 3f4:	3c f4       	brge	.+14     	; 0x404 <Lcd8_Port+0xec>
	pinChange(D7,1);
 3f6:	85 e2       	ldi	r24, 0x25	; 37
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 402:	06 c0       	rjmp	.+12     	; 0x410 <Lcd8_Port+0xf8>
	else
	pinChange(D7,0);
 404:	85 e2       	ldi	r24, 0x25	; 37
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
 416:	cf 93       	push	r28
 418:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 41a:	8a e1       	ldi	r24, 0x1A	; 26
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
 426:	8c 2f       	mov	r24, r28
 428:	0e 94 8c 01 	call	0x318	; 0x318 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 42c:	8b e1       	ldi	r24, 0x1B	; 27
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <Lcd8_Cmd+0x26>
 440:	00 c0       	rjmp	.+0      	; 0x442 <Lcd8_Cmd+0x2c>
 442:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 444:	8b e1       	ldi	r24, 0x1B	; 27
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <Lcd8_Cmd+0x3e>
 458:	00 c0       	rjmp	.+0      	; 0x45a <Lcd8_Cmd+0x44>
 45a:	00 00       	nop
	_delay_ms(1);
}
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
}
 466:	08 95       	ret

00000468 <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	29 f4       	brne	.+10     	; 0x476 <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
 46c:	86 2f       	mov	r24, r22
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
 474:	08 95       	ret
	else if(a == 2)
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	21 f4       	brne	.+8      	; 0x482 <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
 47a:	86 2f       	mov	r24, r22
 47c:	80 54       	subi	r24, 0x40	; 64
 47e:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
 482:	08 95       	ret

00000484 <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
 484:	8a e1       	ldi	r24, 0x1A	; 26
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	pinChange(EN,0);
 490:	8b e1       	ldi	r24, 0x1B	; 27
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	99 ef       	ldi	r25, 0xF9	; 249
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	81 50       	subi	r24, 0x01	; 1
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	a0 40       	sbci	r26, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <Lcd8_Init+0x1e>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <Lcd8_Init+0x28>
 4ac:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
 4ae:	80 e3       	ldi	r24, 0x30	; 48
 4b0:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
 4b4:	af e1       	ldi	r26, 0x1F	; 31
 4b6:	be e4       	ldi	r27, 0x4E	; 78
 4b8:	11 97       	sbiw	r26, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <Lcd8_Init+0x34>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <Lcd8_Init+0x3a>
 4be:	00 00       	nop
	_delay_ms(5);
	Lcd8_Cmd(0x30);
 4c0:	80 e3       	ldi	r24, 0x30	; 48
 4c2:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
 4c6:	8f e9       	ldi	r24, 0x9F	; 159
 4c8:	9f e0       	ldi	r25, 0x0F	; 15
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <Lcd8_Init+0x46>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <Lcd8_Init+0x4c>
 4d0:	00 00       	nop
	_delay_ms(1);
	Lcd8_Cmd(0x30);
 4d2:	80 e3       	ldi	r24, 0x30	; 48
 4d4:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
 4d8:	af e3       	ldi	r26, 0x3F	; 63
 4da:	bc e9       	ldi	r27, 0x9C	; 156
 4dc:	11 97       	sbiw	r26, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <Lcd8_Init+0x58>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <Lcd8_Init+0x5e>
 4e2:	00 00       	nop
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
 4e4:	88 e3       	ldi	r24, 0x38	; 56
 4e6:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
 4ea:	8c e0       	ldi	r24, 0x0C	; 12
 4ec:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
 4f6:	86 e0       	ldi	r24, 0x06	; 6
 4f8:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
}
 4fc:	08 95       	ret

000004fe <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
 4fe:	cf 93       	push	r28
 500:	c8 2f       	mov	r28, r24
	pinChange(RS,1);             // => RS = 1
 502:	8a e1       	ldi	r24, 0x1A	; 26
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
 50e:	8c 2f       	mov	r24, r28
 510:	0e 94 8c 01 	call	0x318	; 0x318 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 514:	8b e1       	ldi	r24, 0x1B	; 27
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 520:	8f e9       	ldi	r24, 0x9F	; 159
 522:	9f e0       	ldi	r25, 0x0F	; 15
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <Lcd8_Write_Char+0x26>
 528:	00 c0       	rjmp	.+0      	; 0x52a <Lcd8_Write_Char+0x2c>
 52a:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
 52c:	8b e1       	ldi	r24, 0x1B	; 27
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 538:	8f e9       	ldi	r24, 0x9F	; 159
 53a:	9f e0       	ldi	r25, 0x0F	; 15
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <Lcd8_Write_Char+0x3e>
 540:	00 c0       	rjmp	.+0      	; 0x542 <Lcd8_Write_Char+0x44>
 542:	00 00       	nop
	_delay_ms(1);
}
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 54e:	88 81       	ld	r24, Y
 550:	88 23       	and	r24, r24
 552:	31 f0       	breq	.+12     	; 0x560 <Lcd8_Write_String+0x18>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
	_delay_ms(1);
}

void Lcd8_Write_String(char *a)
 554:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
 556:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 55a:	89 91       	ld	r24, Y+
 55c:	88 23       	and	r24, r24
 55e:	d9 f7       	brne	.-10     	; 0x556 <Lcd8_Write_String+0xe>
	Lcd8_Write_Char(a[i]);
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
 566:	8c e1       	ldi	r24, 0x1C	; 28
 568:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
}
 56c:	08 95       	ret

0000056e <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
 56e:	88 e1       	ldi	r24, 0x18	; 24
 570:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd8_Cmd>
}
 574:	08 95       	ret

00000576 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
	if(a & 1)
 57a:	c8 2f       	mov	r28, r24
 57c:	80 ff       	sbrs	r24, 0
 57e:	07 c0       	rjmp	.+14     	; 0x58e <Lcd4_Port+0x18>
	pinChange(D4,1);
 580:	82 e2       	ldi	r24, 0x22	; 34
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 58c:	06 c0       	rjmp	.+12     	; 0x59a <Lcd4_Port+0x24>
	else
	pinChange(D4,0);
 58e:	82 e2       	ldi	r24, 0x22	; 34
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 59a:	c1 ff       	sbrs	r28, 1
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <Lcd4_Port+0x36>
	pinChange(D5,1);
 59e:	83 e2       	ldi	r24, 0x23	; 35
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <Lcd4_Port+0x42>
	else
	pinChange(D5,0);
 5ac:	83 e2       	ldi	r24, 0x23	; 35
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 5b8:	c2 ff       	sbrs	r28, 2
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <Lcd4_Port+0x54>
	pinChange(D6,1);
 5bc:	84 e2       	ldi	r24, 0x24	; 36
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <Lcd4_Port+0x60>
	else
	pinChange(D6,0);
 5ca:	84 e2       	ldi	r24, 0x24	; 36
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 5d6:	c3 ff       	sbrs	r28, 3
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <Lcd4_Port+0x72>
	pinChange(D7,1);
 5da:	85 e2       	ldi	r24, 0x25	; 37
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <Lcd4_Port+0x7e>
	else
	pinChange(D7,0);
 5e8:	85 e2       	ldi	r24, 0x25	; 37
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 5fa:	cf 93       	push	r28
 5fc:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 5fe:	8a e1       	ldi	r24, 0x1A	; 26
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 60a:	8c 2f       	mov	r24, r28
 60c:	0e 94 bb 02 	call	0x576	; 0x576 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 610:	8b e1       	ldi	r24, 0x1B	; 27
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 61c:	8f e9       	ldi	r24, 0x9F	; 159
 61e:	9f e0       	ldi	r25, 0x0F	; 15
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <Lcd4_Cmd+0x26>
 624:	00 c0       	rjmp	.+0      	; 0x626 <Lcd4_Cmd+0x2c>
 626:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 628:	8b e1       	ldi	r24, 0x1B	; 27
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 634:	8f e9       	ldi	r24, 0x9F	; 159
 636:	9f e0       	ldi	r25, 0x0F	; 15
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <Lcd4_Cmd+0x3e>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <Lcd4_Cmd+0x44>
 63e:	00 00       	nop
	_delay_ms(1);
}
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(1);
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
}
 650:	08 95       	ret

00000652 <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
 652:	cf 93       	push	r28
 654:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	59 f4       	brne	.+22     	; 0x670 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 65a:	86 2f       	mov	r24, r22
 65c:	80 58       	subi	r24, 0x80	; 128
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 65e:	82 95       	swap	r24
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
		Lcd4_Cmd(y);
 666:	8c 2f       	mov	r24, r28
 668:	8f 70       	andi	r24, 0x0F	; 15
 66a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
 66e:	0c c0       	rjmp	.+24     	; 0x688 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 670:	82 30       	cpi	r24, 0x02	; 2
 672:	51 f4       	brne	.+20     	; 0x688 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0x80 + b;
 674:	86 2f       	mov	r24, r22
 676:	80 58       	subi	r24, 0x80	; 128
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 678:	82 95       	swap	r24
 67a:	8f 70       	andi	r24, 0x0F	; 15
 67c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
		Lcd4_Cmd(y);
 680:	8c 2f       	mov	r24, r28
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	}
}
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 bb 02 	call	0x576	; 0x576 <Lcd4_Port>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	99 ef       	ldi	r25, 0xF9	; 249
 696:	a0 e0       	ldi	r26, 0x00	; 0
 698:	81 50       	subi	r24, 0x01	; 1
 69a:	90 40       	sbci	r25, 0x00	; 0
 69c:	a0 40       	sbci	r26, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <Lcd4_Init+0xc>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <Lcd4_Init+0x16>
 6a2:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
 6aa:	af e1       	ldi	r26, 0x1F	; 31
 6ac:	be e4       	ldi	r27, 0x4E	; 78
 6ae:	11 97       	sbiw	r26, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <Lcd4_Init+0x22>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <Lcd4_Init+0x28>
 6b4:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
 6bc:	8f ed       	ldi	r24, 0xDF	; 223
 6be:	9b ea       	ldi	r25, 0xAB	; 171
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <Lcd4_Init+0x34>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <Lcd4_Init+0x3a>
 6c6:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 6da:	88 e0       	ldi	r24, 0x08	; 8
 6dc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 6e6:	8c e0       	ldi	r24, 0x0C	; 12
 6e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
}
 6f8:	08 95       	ret

000006fa <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
 6fa:	cf 93       	push	r28
 6fc:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 6fe:	8a e1       	ldi	r24, 0x1A	; 26
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 70a:	8c 2f       	mov	r24, r28
 70c:	82 95       	swap	r24
 70e:	8f 70       	andi	r24, 0x0F	; 15
 710:	0e 94 bb 02 	call	0x576	; 0x576 <Lcd4_Port>
	pinChange(EN,1);
 714:	8b e1       	ldi	r24, 0x1B	; 27
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 720:	8f e9       	ldi	r24, 0x9F	; 159
 722:	9f e0       	ldi	r25, 0x0F	; 15
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <Lcd4_Write_Char+0x2a>
 728:	00 c0       	rjmp	.+0      	; 0x72a <Lcd4_Write_Char+0x30>
 72a:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 72c:	8b e1       	ldi	r24, 0x1B	; 27
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 738:	8f e9       	ldi	r24, 0x9F	; 159
 73a:	9f e0       	ldi	r25, 0x0F	; 15
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <Lcd4_Write_Char+0x42>
 740:	00 c0       	rjmp	.+0      	; 0x742 <Lcd4_Write_Char+0x48>
 742:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 744:	8c 2f       	mov	r24, r28
 746:	8f 70       	andi	r24, 0x0F	; 15
 748:	0e 94 bb 02 	call	0x576	; 0x576 <Lcd4_Port>
	pinChange(EN,1);
 74c:	8b e1       	ldi	r24, 0x1B	; 27
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 758:	8f e9       	ldi	r24, 0x9F	; 159
 75a:	9f e0       	ldi	r25, 0x0F	; 15
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <Lcd4_Write_Char+0x62>
 760:	00 c0       	rjmp	.+0      	; 0x762 <Lcd4_Write_Char+0x68>
 762:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 764:	8b e1       	ldi	r24, 0x1B	; 27
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 770:	8f e9       	ldi	r24, 0x9F	; 159
 772:	9f e0       	ldi	r25, 0x0F	; 15
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	f1 f7       	brne	.-4      	; 0x774 <Lcd4_Write_Char+0x7a>
 778:	00 c0       	rjmp	.+0      	; 0x77a <Lcd4_Write_Char+0x80>
 77a:	00 00       	nop
	_delay_ms(1);
}
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 786:	88 81       	ld	r24, Y
 788:	88 23       	and	r24, r24
 78a:	31 f0       	breq	.+12     	; 0x798 <Lcd4_Write_String+0x18>
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
}

void Lcd4_Write_String(char *a)
 78c:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
 78e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 792:	89 91       	ld	r24, Y+
 794:	88 23       	and	r24, r24
 796:	d9 f7       	brne	.-10     	; 0x78e <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 7a4:	8c e0       	ldi	r24, 0x0C	; 12
 7a6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
}
 7aa:	08 95       	ret

000007ac <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 7b2:	88 e0       	ldi	r24, 0x08	; 8
 7b4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Lcd4_Cmd>
}
 7b8:	08 95       	ret

000007ba <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main(void)
{
    DDRD = 0xFF;
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 7be:	84 bb       	out	0x14, r24	; 20
	int i;
	Lcd8_Init();
 7c0:	0e 94 42 02 	call	0x484	; 0x484 <Lcd8_Init>
	while(1)
	{
		Lcd8_Set_Cursor(1,1);
		Lcd8_Write_String("electroSome LCD Hello World");
 7c4:	0f 2e       	mov	r0, r31
 7c6:	f0 e6       	ldi	r31, 0x60	; 96
 7c8:	ef 2e       	mov	r14, r31
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	ff 2e       	mov	r15, r31
 7ce:	f0 2d       	mov	r31, r0
 7d0:	0f e0       	ldi	r16, 0x0F	; 15
 7d2:	10 e0       	ldi	r17, 0x00	; 0
	DDRC = 0xFF;
	int i;
	Lcd8_Init();
	while(1)
	{
		Lcd8_Set_Cursor(1,1);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	0e 94 34 02 	call	0x468	; 0x468 <Lcd8_Set_Cursor>
		Lcd8_Write_String("electroSome LCD Hello World");
 7dc:	c7 01       	movw	r24, r14
 7de:	0e 94 a4 02 	call	0x548	; 0x548 <Lcd8_Write_String>
 7e2:	e8 01       	movw	r28, r16
 7e4:	8f ef       	ldi	r24, 0xFF	; 255
 7e6:	99 e6       	ldi	r25, 0x69	; 105
 7e8:	a8 e1       	ldi	r26, 0x18	; 24
 7ea:	81 50       	subi	r24, 0x01	; 1
 7ec:	90 40       	sbci	r25, 0x00	; 0
 7ee:	a0 40       	sbci	r26, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <main+0x30>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <main+0x3a>
 7f4:	00 00       	nop
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
 7f6:	0e 94 b7 02 	call	0x56e	; 0x56e <Lcd8_Shift_Left>
 7fa:	21 97       	sbiw	r28, 0x01	; 1
	Lcd8_Init();
	while(1)
	{
		Lcd8_Set_Cursor(1,1);
		Lcd8_Write_String("electroSome LCD Hello World");
		for(i=0;i<15;i++)
 7fc:	99 f7       	brne	.-26     	; 0x7e4 <main+0x2a>
 7fe:	e8 01       	movw	r28, r16
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	99 e6       	ldi	r25, 0x69	; 105
 804:	a8 e1       	ldi	r26, 0x18	; 24
 806:	81 50       	subi	r24, 0x01	; 1
 808:	90 40       	sbci	r25, 0x00	; 0
 80a:	a0 40       	sbci	r26, 0x00	; 0
 80c:	e1 f7       	brne	.-8      	; 0x806 <main+0x4c>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x56>
 810:	00 00       	nop
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
 812:	0e 94 b3 02 	call	0x566	; 0x566 <Lcd8_Shift_Right>
 816:	21 97       	sbiw	r28, 0x01	; 1
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
 818:	99 f7       	brne	.-26     	; 0x800 <main+0x46>
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
		}
		Lcd8_Clear();
 81a:	0e 94 30 02 	call	0x460	; 0x460 <Lcd8_Clear>
		Lcd8_Write_Char('e');
 81e:	85 e6       	ldi	r24, 0x65	; 101
 820:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd8_Write_Char>
		Lcd8_Write_Char('S');
 824:	83 e5       	ldi	r24, 0x53	; 83
 826:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Lcd8_Write_Char>
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	97 ea       	ldi	r25, 0xA7	; 167
 82e:	a1 e6       	ldi	r26, 0x61	; 97
 830:	81 50       	subi	r24, 0x01	; 1
 832:	90 40       	sbci	r25, 0x00	; 0
 834:	a0 40       	sbci	r26, 0x00	; 0
 836:	e1 f7       	brne	.-8      	; 0x830 <main+0x76>
 838:	00 c0       	rjmp	.+0      	; 0x83a <main+0x80>
 83a:	00 00       	nop
 83c:	cb cf       	rjmp	.-106    	; 0x7d4 <main+0x1a>

0000083e <_exit>:
 83e:	f8 94       	cli

00000840 <__stop_program>:
 840:	ff cf       	rjmp	.-2      	; 0x840 <__stop_program>
